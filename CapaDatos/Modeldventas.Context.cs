//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CapaDatos
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class dbventasEntity : DbContext
    {
        public dbventasEntity()
            : base("name=dbventasEntity")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<articulo> articulo { get; set; }
        public virtual DbSet<categoria> categoria { get; set; }
        public virtual DbSet<cliente> cliente { get; set; }
        public virtual DbSet<cuentas_x_cobrar> cuentas_x_cobrar { get; set; }
        public virtual DbSet<cuentas_x_pagar> cuentas_x_pagar { get; set; }
        public virtual DbSet<detalle_ingreso> detalle_ingreso { get; set; }
        public virtual DbSet<detalle_venta> detalle_venta { get; set; }
        public virtual DbSet<ingreso> ingreso { get; set; }
        public virtual DbSet<MovimientosPagosYcobranzas> MovimientosPagosYcobranzas { get; set; }
        public virtual DbSet<proveedor> proveedor { get; set; }
        public virtual DbSet<ROLES> ROLES { get; set; }
        public virtual DbSet<trabajador> trabajador { get; set; }
        public virtual DbSet<USERS> USERS { get; set; }
        public virtual DbSet<venta> venta { get; set; }
        public virtual DbSet<get_client_parameter> get_client_parameter { get; set; }
        public virtual DbSet<VW_CLIENTES_LOAD> VW_CLIENTES_LOAD { get; set; }
        public virtual DbSet<wv_get_cliente_deuda> wv_get_cliente_deuda { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int SP_CUENTA_POR_COBRAR(Nullable<int> id, Nullable<int> id_cliente, Nullable<decimal> valor, Nullable<decimal> pagado, string usuario, string idFactura)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var id_clienteParameter = id_cliente.HasValue ?
                new ObjectParameter("id_cliente", id_cliente) :
                new ObjectParameter("id_cliente", typeof(int));
    
            var valorParameter = valor.HasValue ?
                new ObjectParameter("valor", valor) :
                new ObjectParameter("valor", typeof(decimal));
    
            var pagadoParameter = pagado.HasValue ?
                new ObjectParameter("pagado", pagado) :
                new ObjectParameter("pagado", typeof(decimal));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("usuario", usuario) :
                new ObjectParameter("usuario", typeof(string));
    
            var idFacturaParameter = idFactura != null ?
                new ObjectParameter("idFactura", idFactura) :
                new ObjectParameter("idFactura", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CUENTA_POR_COBRAR", idParameter, id_clienteParameter, valorParameter, pagadoParameter, usuarioParameter, idFacturaParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<SP_GET_ARTICULO_LOAD_Result> SP_GET_ARTICULO_LOAD()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GET_ARTICULO_LOAD_Result>("SP_GET_ARTICULO_LOAD");
        }
    
        public virtual ObjectResult<SP_GET_ARTICULOS_BUSCAR_Result> SP_GET_ARTICULOS_BUSCAR(string codigo, string nombre)
        {
            var codigoParameter = codigo != null ?
                new ObjectParameter("codigo", codigo) :
                new ObjectParameter("codigo", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GET_ARTICULOS_BUSCAR_Result>("SP_GET_ARTICULOS_BUSCAR", codigoParameter, nombreParameter);
        }
    
        public virtual ObjectResult<SP_GET_articulos_LOAD_Result> SP_GET_articulos_LOAD()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GET_articulos_LOAD_Result>("SP_GET_articulos_LOAD");
        }
    
        public virtual ObjectResult<SP_GET_CATEGORIA_BUSCAR_Result> SP_GET_CATEGORIA_BUSCAR(string nombre)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GET_CATEGORIA_BUSCAR_Result>("SP_GET_CATEGORIA_BUSCAR", nombreParameter);
        }
    
        public virtual ObjectResult<SP_GET_Categoria_LOAD_Result> SP_GET_Categoria_LOAD()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GET_Categoria_LOAD_Result>("SP_GET_Categoria_LOAD");
        }
    
        public virtual ObjectResult<SP_GET_CLIENTES_BUSCAR_Result> SP_GET_CLIENTES_BUSCAR(string codigoCliente, string identificacion, string nombre_Completo, string telefono)
        {
            var codigoClienteParameter = codigoCliente != null ?
                new ObjectParameter("CodigoCliente", codigoCliente) :
                new ObjectParameter("CodigoCliente", typeof(string));
    
            var identificacionParameter = identificacion != null ?
                new ObjectParameter("Identificacion", identificacion) :
                new ObjectParameter("Identificacion", typeof(string));
    
            var nombre_CompletoParameter = nombre_Completo != null ?
                new ObjectParameter("Nombre_Completo", nombre_Completo) :
                new ObjectParameter("Nombre_Completo", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GET_CLIENTES_BUSCAR_Result>("SP_GET_CLIENTES_BUSCAR", codigoClienteParameter, identificacionParameter, nombre_CompletoParameter, telefonoParameter);
        }
    
        public virtual ObjectResult<sp_get_clientes_deudores_Result> sp_get_clientes_deudores()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_get_clientes_deudores_Result>("sp_get_clientes_deudores");
        }
    
        public virtual ObjectResult<SP_GET_CLIENTES_LOAD_Result> SP_GET_CLIENTES_LOAD()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GET_CLIENTES_LOAD_Result>("SP_GET_CLIENTES_LOAD");
        }
    
        public virtual ObjectResult<SP_GET_COMBOBOX_CLIENTE_Result> SP_GET_COMBOBOX_CLIENTE()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GET_COMBOBOX_CLIENTE_Result>("SP_GET_COMBOBOX_CLIENTE");
        }
    
        public virtual ObjectResult<sp_get_searche_client_pagos_Result> sp_get_searche_client_pagos(string num_documento, string codigoCliente, string nombComp)
        {
            var num_documentoParameter = num_documento != null ?
                new ObjectParameter("num_documento", num_documento) :
                new ObjectParameter("num_documento", typeof(string));
    
            var codigoClienteParameter = codigoCliente != null ?
                new ObjectParameter("codigoCliente", codigoCliente) :
                new ObjectParameter("codigoCliente", typeof(string));
    
            var nombCompParameter = nombComp != null ?
                new ObjectParameter("NombComp", nombComp) :
                new ObjectParameter("NombComp", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_get_searche_client_pagos_Result>("sp_get_searche_client_pagos", num_documentoParameter, codigoClienteParameter, nombCompParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int SP_LOGIN(string usuario, string contrasena, ObjectParameter rolid)
        {
            var usuarioParameter = usuario != null ?
                new ObjectParameter("usuario", usuario) :
                new ObjectParameter("usuario", typeof(string));
    
            var contrasenaParameter = contrasena != null ?
                new ObjectParameter("contrasena", contrasena) :
                new ObjectParameter("contrasena", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_LOGIN", usuarioParameter, contrasenaParameter, rolid);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int SP_SET_ARTICULO_INSERT_UPDATE(Nullable<int> idarticulo, string codigo, string nombre, Nullable<int> idcategoria, string imag_Url, string descripcion, Nullable<decimal> precioVenta, Nullable<decimal> precioCompra, Nullable<decimal> cantidad, Nullable<bool> estado, Nullable<int> idProveedor)
        {
            var idarticuloParameter = idarticulo.HasValue ?
                new ObjectParameter("idarticulo", idarticulo) :
                new ObjectParameter("idarticulo", typeof(int));
    
            var codigoParameter = codigo != null ?
                new ObjectParameter("codigo", codigo) :
                new ObjectParameter("codigo", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var idcategoriaParameter = idcategoria.HasValue ?
                new ObjectParameter("idcategoria", idcategoria) :
                new ObjectParameter("idcategoria", typeof(int));
    
            var imag_UrlParameter = imag_Url != null ?
                new ObjectParameter("Imag_Url", imag_Url) :
                new ObjectParameter("Imag_Url", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("descripcion", descripcion) :
                new ObjectParameter("descripcion", typeof(string));
    
            var precioVentaParameter = precioVenta.HasValue ?
                new ObjectParameter("precioVenta", precioVenta) :
                new ObjectParameter("precioVenta", typeof(decimal));
    
            var precioCompraParameter = precioCompra.HasValue ?
                new ObjectParameter("precioCompra", precioCompra) :
                new ObjectParameter("precioCompra", typeof(decimal));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(decimal));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(bool));
    
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("idProveedor", idProveedor) :
                new ObjectParameter("idProveedor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SET_ARTICULO_INSERT_UPDATE", idarticuloParameter, codigoParameter, nombreParameter, idcategoriaParameter, imag_UrlParameter, descripcionParameter, precioVentaParameter, precioCompraParameter, cantidadParameter, estadoParameter, idProveedorParameter);
        }
    
        public virtual int SP_SET_CATEGORIA(Nullable<int> idCat, string nom, string desc)
        {
            var idCatParameter = idCat.HasValue ?
                new ObjectParameter("idCat", idCat) :
                new ObjectParameter("idCat", typeof(int));
    
            var nomParameter = nom != null ?
                new ObjectParameter("nom", nom) :
                new ObjectParameter("nom", typeof(string));
    
            var descParameter = desc != null ?
                new ObjectParameter("Desc", desc) :
                new ObjectParameter("Desc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SET_CATEGORIA", idCatParameter, nomParameter, descParameter);
        }
    
        public virtual int SP_SET_Categoria_UPDATE_INSERT(Nullable<int> idCategoria, string nomCategiria, string descripcion)
        {
            var idCategoriaParameter = idCategoria.HasValue ?
                new ObjectParameter("IdCategoria", idCategoria) :
                new ObjectParameter("IdCategoria", typeof(int));
    
            var nomCategiriaParameter = nomCategiria != null ?
                new ObjectParameter("NomCategiria", nomCategiria) :
                new ObjectParameter("NomCategiria", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SET_Categoria_UPDATE_INSERT", idCategoriaParameter, nomCategiriaParameter, descripcionParameter);
        }
    
        public virtual int SP_SET_CLIENTE_DELETE(Nullable<int> idcliente, string usuarioModifica)
        {
            var idclienteParameter = idcliente.HasValue ?
                new ObjectParameter("idcliente", idcliente) :
                new ObjectParameter("idcliente", typeof(int));
    
            var usuarioModificaParameter = usuarioModifica != null ?
                new ObjectParameter("UsuarioModifica", usuarioModifica) :
                new ObjectParameter("UsuarioModifica", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SET_CLIENTE_DELETE", idclienteParameter, usuarioModificaParameter);
        }
    
        public virtual int SP_SET_CLIENTE_INSERT_UPDATE(Nullable<int> idcliente, string nombre, string apellidos, string sexo, Nullable<System.DateTime> fecha_nacimiento, string tipo_documento, string num_documento, string direccion, string telefono, string email, Nullable<bool> status, Nullable<System.DateTime> fechaAdiciona, Nullable<System.DateTime> fechaModifica, string usuarioAdiciona)
        {
            var idclienteParameter = idcliente.HasValue ?
                new ObjectParameter("idcliente", idcliente) :
                new ObjectParameter("idcliente", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("apellidos", apellidos) :
                new ObjectParameter("apellidos", typeof(string));
    
            var sexoParameter = sexo != null ?
                new ObjectParameter("sexo", sexo) :
                new ObjectParameter("sexo", typeof(string));
    
            var fecha_nacimientoParameter = fecha_nacimiento.HasValue ?
                new ObjectParameter("fecha_nacimiento", fecha_nacimiento) :
                new ObjectParameter("fecha_nacimiento", typeof(System.DateTime));
    
            var tipo_documentoParameter = tipo_documento != null ?
                new ObjectParameter("tipo_documento", tipo_documento) :
                new ObjectParameter("tipo_documento", typeof(string));
    
            var num_documentoParameter = num_documento != null ?
                new ObjectParameter("num_documento", num_documento) :
                new ObjectParameter("num_documento", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(bool));
    
            var fechaAdicionaParameter = fechaAdiciona.HasValue ?
                new ObjectParameter("FechaAdiciona", fechaAdiciona) :
                new ObjectParameter("FechaAdiciona", typeof(System.DateTime));
    
            var fechaModificaParameter = fechaModifica.HasValue ?
                new ObjectParameter("FechaModifica", fechaModifica) :
                new ObjectParameter("FechaModifica", typeof(System.DateTime));
    
            var usuarioAdicionaParameter = usuarioAdiciona != null ?
                new ObjectParameter("UsuarioAdiciona", usuarioAdiciona) :
                new ObjectParameter("UsuarioAdiciona", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SET_CLIENTE_INSERT_UPDATE", idclienteParameter, nombreParameter, apellidosParameter, sexoParameter, fecha_nacimientoParameter, tipo_documentoParameter, num_documentoParameter, direccionParameter, telefonoParameter, emailParameter, statusParameter, fechaAdicionaParameter, fechaModificaParameter, usuarioAdicionaParameter);
        }
    
        public virtual int SP_SET_CLIENTE_INSERT_UPDATE_20180528(Nullable<int> idcliente, string nombre, string apellidos, string sexo, Nullable<System.DateTime> fecha_nacimiento, string tipo_documento, string num_documento, string direccion, string telefono, string email, Nullable<bool> status, Nullable<System.DateTime> fechaAdiciona, string usuarioAdiciona)
        {
            var idclienteParameter = idcliente.HasValue ?
                new ObjectParameter("idcliente", idcliente) :
                new ObjectParameter("idcliente", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("apellidos", apellidos) :
                new ObjectParameter("apellidos", typeof(string));
    
            var sexoParameter = sexo != null ?
                new ObjectParameter("sexo", sexo) :
                new ObjectParameter("sexo", typeof(string));
    
            var fecha_nacimientoParameter = fecha_nacimiento.HasValue ?
                new ObjectParameter("fecha_nacimiento", fecha_nacimiento) :
                new ObjectParameter("fecha_nacimiento", typeof(System.DateTime));
    
            var tipo_documentoParameter = tipo_documento != null ?
                new ObjectParameter("tipo_documento", tipo_documento) :
                new ObjectParameter("tipo_documento", typeof(string));
    
            var num_documentoParameter = num_documento != null ?
                new ObjectParameter("num_documento", num_documento) :
                new ObjectParameter("num_documento", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(bool));
    
            var fechaAdicionaParameter = fechaAdiciona.HasValue ?
                new ObjectParameter("FechaAdiciona", fechaAdiciona) :
                new ObjectParameter("FechaAdiciona", typeof(System.DateTime));
    
            var usuarioAdicionaParameter = usuarioAdiciona != null ?
                new ObjectParameter("UsuarioAdiciona", usuarioAdiciona) :
                new ObjectParameter("UsuarioAdiciona", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SET_CLIENTE_INSERT_UPDATE_20180528", idclienteParameter, nombreParameter, apellidosParameter, sexoParameter, fecha_nacimientoParameter, tipo_documentoParameter, num_documentoParameter, direccionParameter, telefonoParameter, emailParameter, statusParameter, fechaAdicionaParameter, usuarioAdicionaParameter);
        }
    
        public virtual int SP_SET_DELETE_ARTICULO(Nullable<int> codigo, Nullable<bool> estado)
        {
            var codigoParameter = codigo.HasValue ?
                new ObjectParameter("codigo", codigo) :
                new ObjectParameter("codigo", typeof(int));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SET_DELETE_ARTICULO", codigoParameter, estadoParameter);
        }
    
        public virtual int SP_SET_INSERT_UPDATE_ARTICULO(Nullable<int> idarticulo, string codigo, string nombre, Nullable<int> idcategoria, string imag_Url, string descripcion, Nullable<decimal> precioVenta, Nullable<decimal> precioCompra, Nullable<decimal> cantidad, Nullable<bool> estado, Nullable<int> idProveedor)
        {
            var idarticuloParameter = idarticulo.HasValue ?
                new ObjectParameter("idarticulo", idarticulo) :
                new ObjectParameter("idarticulo", typeof(int));
    
            var codigoParameter = codigo != null ?
                new ObjectParameter("codigo", codigo) :
                new ObjectParameter("codigo", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var idcategoriaParameter = idcategoria.HasValue ?
                new ObjectParameter("idcategoria", idcategoria) :
                new ObjectParameter("idcategoria", typeof(int));
    
            var imag_UrlParameter = imag_Url != null ?
                new ObjectParameter("Imag_Url", imag_Url) :
                new ObjectParameter("Imag_Url", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("descripcion", descripcion) :
                new ObjectParameter("descripcion", typeof(string));
    
            var precioVentaParameter = precioVenta.HasValue ?
                new ObjectParameter("precioVenta", precioVenta) :
                new ObjectParameter("precioVenta", typeof(decimal));
    
            var precioCompraParameter = precioCompra.HasValue ?
                new ObjectParameter("precioCompra", precioCompra) :
                new ObjectParameter("precioCompra", typeof(decimal));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(decimal));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(bool));
    
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("idProveedor", idProveedor) :
                new ObjectParameter("idProveedor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SET_INSERT_UPDATE_ARTICULO", idarticuloParameter, codigoParameter, nombreParameter, idcategoriaParameter, imag_UrlParameter, descripcionParameter, precioVentaParameter, precioCompraParameter, cantidadParameter, estadoParameter, idProveedorParameter);
        }
    
        public virtual int SP_SET_INSERT_UPDATE_INGRESO(Nullable<int> idingreso, Nullable<int> idproveedor, Nullable<System.DateTime> fecha, string tipo_comprobante, string serie, string correlativo, Nullable<decimal> itbis, Nullable<System.DateTime> fechaAdiciona, Nullable<System.DateTime> fechaModifica, string usuarioAdiciona, string usuarioModifica, Nullable<int> idarticulo, Nullable<decimal> precio_compra, Nullable<decimal> precio_venta, Nullable<int> stock_inicial, Nullable<int> stock_actual, Nullable<System.DateTime> fecha_produccion, Nullable<System.DateTime> fecha_vencimiento)
        {
            var idingresoParameter = idingreso.HasValue ?
                new ObjectParameter("idingreso", idingreso) :
                new ObjectParameter("idingreso", typeof(int));
    
            var idproveedorParameter = idproveedor.HasValue ?
                new ObjectParameter("idproveedor", idproveedor) :
                new ObjectParameter("idproveedor", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var tipo_comprobanteParameter = tipo_comprobante != null ?
                new ObjectParameter("tipo_comprobante", tipo_comprobante) :
                new ObjectParameter("tipo_comprobante", typeof(string));
    
            var serieParameter = serie != null ?
                new ObjectParameter("serie", serie) :
                new ObjectParameter("serie", typeof(string));
    
            var correlativoParameter = correlativo != null ?
                new ObjectParameter("correlativo", correlativo) :
                new ObjectParameter("correlativo", typeof(string));
    
            var itbisParameter = itbis.HasValue ?
                new ObjectParameter("Itbis", itbis) :
                new ObjectParameter("Itbis", typeof(decimal));
    
            var fechaAdicionaParameter = fechaAdiciona.HasValue ?
                new ObjectParameter("FechaAdiciona", fechaAdiciona) :
                new ObjectParameter("FechaAdiciona", typeof(System.DateTime));
    
            var fechaModificaParameter = fechaModifica.HasValue ?
                new ObjectParameter("FechaModifica", fechaModifica) :
                new ObjectParameter("FechaModifica", typeof(System.DateTime));
    
            var usuarioAdicionaParameter = usuarioAdiciona != null ?
                new ObjectParameter("UsuarioAdiciona", usuarioAdiciona) :
                new ObjectParameter("UsuarioAdiciona", typeof(string));
    
            var usuarioModificaParameter = usuarioModifica != null ?
                new ObjectParameter("UsuarioModifica", usuarioModifica) :
                new ObjectParameter("UsuarioModifica", typeof(string));
    
            var idarticuloParameter = idarticulo.HasValue ?
                new ObjectParameter("idarticulo", idarticulo) :
                new ObjectParameter("idarticulo", typeof(int));
    
            var precio_compraParameter = precio_compra.HasValue ?
                new ObjectParameter("precio_compra", precio_compra) :
                new ObjectParameter("precio_compra", typeof(decimal));
    
            var precio_ventaParameter = precio_venta.HasValue ?
                new ObjectParameter("precio_venta", precio_venta) :
                new ObjectParameter("precio_venta", typeof(decimal));
    
            var stock_inicialParameter = stock_inicial.HasValue ?
                new ObjectParameter("stock_inicial", stock_inicial) :
                new ObjectParameter("stock_inicial", typeof(int));
    
            var stock_actualParameter = stock_actual.HasValue ?
                new ObjectParameter("stock_actual", stock_actual) :
                new ObjectParameter("stock_actual", typeof(int));
    
            var fecha_produccionParameter = fecha_produccion.HasValue ?
                new ObjectParameter("fecha_produccion", fecha_produccion) :
                new ObjectParameter("fecha_produccion", typeof(System.DateTime));
    
            var fecha_vencimientoParameter = fecha_vencimiento.HasValue ?
                new ObjectParameter("fecha_vencimiento", fecha_vencimiento) :
                new ObjectParameter("fecha_vencimiento", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SET_INSERT_UPDATE_INGRESO", idingresoParameter, idproveedorParameter, fechaParameter, tipo_comprobanteParameter, serieParameter, correlativoParameter, itbisParameter, fechaAdicionaParameter, fechaModificaParameter, usuarioAdicionaParameter, usuarioModificaParameter, idarticuloParameter, precio_compraParameter, precio_ventaParameter, stock_inicialParameter, stock_actualParameter, fecha_produccionParameter, fecha_vencimientoParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
